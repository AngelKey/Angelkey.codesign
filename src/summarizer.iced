crypto      = require 'crypto'
tablify     = require 'tablify'
path        = require 'path'
fs          = require 'fs'
{make_esc}  = require 'iced-error'

# =====================================================================================================================

item_types =
  FILE: 0
  DIR:  1
  SYMLINK: 2

# =====================================================================================================================

class SummarizedItem
  constructor: ({parent_path, fname})  ->
    @parent_path    = parent_path
    @fname          = fname
    @item_type      = null
    @realpath       = null
    @link           = null
    @contents       = null
    @hash           = null
    @fstats         = null
    @flstats        = null # slightly different for symbolic links


  load_traverse: (cb) ->
    esc = make_esc cb, "SummarizedItem::load"
    p   = path.join @parent_path, @fname
    await  fs.realpath p, esc defer @realpath
    await  fs.lstat    p, esc defer @flstats
    if @flstats?.isSymbolicLink()
      @item_type = item_types.SYMLINK
      await fs.stat p, esc defer @fstats
      await fs.readlink p, esc defer @link
    else if @flstats.isFile()
      @fstats    = @flstats
      @item_type = item_types.FILE
      await @hash_contents esc defer @hash
    else
      @contents  = []
      @fstats    = @flstats
      @item_type = item_types.DIR
      await fs.readdir @realpath, esc defer fnames
      for f in fnames
        si = new SummarizedItem {fname: f, parent_path: path.join(@parent_path, @fname)}
        await si.load_traverse esc defer()
        @contents.push si
    cb()

  to_str: (depth) ->
    depth  = depth or 0
    indent = ("   " for i in [0...depth]).join "" 
    switch @item_type
      when item_types.FILE
        return "\n#{indent}#{@fname}      #{@hash}"
      when item_types.SYMLINK
        return "\n#{indent}#{@fname}   -> #{@link}"
      when item_types.DIR
        Summarizer.sort_items @contents
        return "\n#{indent}#{@fname}/" + (c.to_str(depth+1) for c in @contents).join ""

  hash_contents: (cb) ->
    fd   = fs.createReadStream @realpath
    hash = crypto.createHash 'sha256'
    hash.setEncoding 'hex'
    fd.on 'end', ->
      hash.end()
      cb null, hash.read()
    fd.on 'error', (e) ->
      cb e
    fd.pipe hash

# =====================================================================================================================

class Summarizer
  constructor: (root_item) ->
    @root_item = root_item

  @from_str: (str) ->
    ###
    takes a summary string (generated by to_str) and builds a Summarizer
    ###

  @from_dir: (dir, cb) ->
    ###
    takes the path to a directory and returns a Summarize instance
    ###
    root_item = new SummarizedItem {fname: '.', parent_path: dir}
    await root_item.load_traverse defer err
    if err
      console.log err
      cb err, null
    else
      cb null, new Summarizer root_item

  @diff: (s1, s2) ->
    ###
    returns a diff of two Summarized directories
    ###

  @sort_items: (items) ->
    items.sort (a,b) -> 
      a.fname.localeCompare b.fname
    return items

  to_str: ->
    ###
    returns a pretty string, which is also
    parsable by from_str
    ###
    return @root_item.to_str 0
  
# =====================================================================================================================

exports.Summarizer = Summarizer

# =====================================================================================================================