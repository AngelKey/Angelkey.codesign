// Generated by IcedCoffeeScript 1.7.1-b
(function() {
  var ArgumentParser, Main, PackageJson, Summarizer, constants, from_md, fs, iced, item_type_names, tablify, to_md, __iced_k, __iced_k_noop, _ref;

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  fs = require('fs');

  ArgumentParser = require('argparse').ArgumentParser;

  PackageJson = require('./package').PackageJson;

  Summarizer = require('./summarizer').Summarizer;

  constants = require('./constants');

  _ref = require('./markdown'), to_md = _ref.to_md, from_md = _ref.from_md;

  item_type_names = require('./constants').item_type_names;

  tablify = require('tablify');

  Main = (function() {
    function Main() {
      this.pkjson = new PackageJson();
      this.args = null;
      this.init_parser();
    }

    Main.prototype.exit_err = function(e) {
      console.log("Error: " + (e.toString()));
      return process.exit(1);
    };

    Main.prototype.init_parser = function() {
      var sign, subparsers, verify;
      this.ap = new ArgumentParser({
        addHelp: true,
        version: this.pkjson.version(),
        description: 'keybase.io directory summarizer',
        prog: this.pkjson.bin()
      });
      subparsers = this.ap.addSubparsers({
        title: 'subcommands',
        dest: 'subcommand_name'
      });
      sign = subparsers.addParser('sign', {
        addHelp: true
      });
      verify = subparsers.addParser('verify', {
        addHelp: true
      });
      sign.addArgument(['-o', '--output'], {
        action: 'store',
        type: 'string',
        help: 'output to a specific file'
      });
      sign.addArgument(['-p', '--preset'], {
        action: 'store',
        type: 'string',
        help: 'use an ignore preset'
      });
      sign.addArgument(['-d', '--dir'], {
        action: 'store',
        type: 'string',
        help: 'the directory to sign',
        defaultValue: '.'
      });
      verify.addArgument(['-i', '--input'], {
        action: 'store',
        type: 'string',
        help: 'load a specific signature file'
      });
      return verify.addArgument(['-d', '--dir'], {
        action: 'store',
        type: 'string',
        help: 'the directory to verify',
        defaultValue: '.'
      });
    };

    Main.prototype.sign = function() {
      var err, o, output, summ, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      output = this.args.output || constants.defaults.filename;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/chris/git/keybase/dir-summarize/src/main.iced",
            funcname: "Main.sign"
          });
          Summarizer.from_dir(_this.args.dir, {
            ignore: [output]
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return summ = arguments[1];
              };
            })(),
            lineno: 48
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (typeof err !== "undefined" && err !== null) {
            _this.exit_err(err);
          }
          o = summ.to_json_obj();
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/chris/git/keybase/dir-summarize/src/main.iced",
              funcname: "Main.sign"
            });
            fs.writeFile(output, to_md(o) + "\n", {
              encoding: 'utf8'
            }, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return err = arguments[0];
                };
              })(),
              lineno: 51
            }));
            __iced_deferrals._fulfill();
          })(function() {
            if (typeof err !== "undefined" && err !== null) {
              _this.exit_err(err);
            }
            return console.log("Success! Output: " + output);
          });
        };
      })(this));
    };

    Main.prototype.run = function() {
      this.args = this.ap.parseArgs();
      switch (this.args.subcommand_name) {
        case 'sign':
          return this.sign();
        case 'verify':
          return this.verify();
      }
    };

    Main.prototype.verify = function() {
      var body, err, expected, f, got, input, json_obj, summ, table, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      input = this.args.input || constants.defaults.filename;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/chris/git/keybase/dir-summarize/src/main.iced",
            funcname: "Main.verify"
          });
          fs.readFile(input, 'utf8', __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return body = arguments[1];
              };
            })(),
            lineno: 69
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (typeof err !== "undefined" && err !== null) {
            _this.exit_err("Couldn't open " + input + "; if using another filename pass with -i <filename>");
          }
          json_obj = from_md(body);
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/chris/git/keybase/dir-summarize/src/main.iced",
              funcname: "Main.verify"
            });
            Summarizer.from_dir(_this.args.dir, {
              ignore: json_obj.ignore
            }, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  err = arguments[0];
                  return summ = arguments[1];
                };
              })(),
              lineno: 74
            }));
            __iced_deferrals._fulfill();
          })(function() {
            var _i, _j, _k, _len, _len1, _len2, _ref1, _ref2, _ref3, _ref4;
            if (typeof err !== "undefined" && err !== null) {
              _this.exit_err(err);
            }
            err = summ.compare_to_json_obj(json_obj);
            if (err) {
              table = [];
              _ref1 = err.missing;
              for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                f = _ref1[_i];
                table.push([f.path, "Missing"]);
              }
              _ref2 = err.orphans;
              for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
                f = _ref2[_j];
                table.push([f.path, "Unknown file"]);
              }
              _ref3 = err.wrong;
              for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
                _ref4 = _ref3[_k], got = _ref4.got, expected = _ref4.expected;
                if (got.item_type !== expected.item_type) {
                  table.push([got.path, "Expected a " + item_type_names[expected.item_type] + " and got a " + item_type_names[got.item_type]]);
                } else if (got.size !== expected.size) {
                  table.push([got.path, "Expected size " + expected.size + " and got " + got.size]);
                } else if (got.hash !== expected.hash) {
                  table.push([got.path, "Bad contents (expected sha256 hash " + expected.hash.slice(0, 8) + "...; got " + got.hash.slice(0, 8) + "...)"]);
                } else if (got.link !== expected.link) {
                  table.push([got.path, "Expected link to '" + expected.link + "' and got link to '" + got.link + "'"]);
                } else if (got.exec && !expected.exec) {
                  table.push([got.path, "Got unexpected user exec privileges"]);
                } else if (!got.exec && expected.exec) {
                  table.push([got.path, "Expected user exec privileges"]);
                }
              }
              console.log(tablify(table));
              console.log("BAD FILES: " + (err.missing.length + err.orphans.length + err.wrong.length));
              return process.exit(1);
            } else {
              return console.log("Success!");
            }
          });
        };
      })(this));
    };

    return Main;

  })();

  exports.run = function() {
    var m;
    m = new Main();
    return m.run();
  };

}).call(this);
