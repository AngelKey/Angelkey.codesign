// Generated by IcedCoffeeScript 1.7.1-b
(function() {
  var DropboxPreset, GitPreset, GlobberPreset, PackageJson, SummarizedItem, Summarizer, XPlatformHash, constants, finfo_cache, iced, item_types, make_esc, path, tablify, utils, vc, __iced_k, __iced_k_noop,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  tablify = require('tablify');

  path = require('path');

  make_esc = require('iced-error').make_esc;

  PackageJson = require('./package').PackageJson;

  constants = require('./constants');

  item_types = require('./constants').item_types;

  utils = require('./utils');

  GitPreset = require('./preset/git');

  DropboxPreset = require('./preset/dropbox');

  GlobberPreset = require('./preset/globber');

  XPlatformHash = require('./x_platform_hash');

  finfo_cache = require('./file_info_cache');

  vc = constants.verify_codes;

  SummarizedItem = (function() {
    function SummarizedItem(_arg) {
      var depth, fname, parent_path, summarizer;
      parent_path = _arg.parent_path, fname = _arg.fname, summarizer = _arg.summarizer, depth = _arg.depth;
      this.parent_path = parent_path;
      this.fname = fname;
      this.summarizer = summarizer;
      this.depth = depth || 0;
      this.item_type = null;
      this.realpath = null;
      this.link = null;
      this.contents = null;
      this.finfo = null;
      this.hash = null;
      this.link_hash = null;
      this.binary = false;
    }

    SummarizedItem.prototype.load_traverse = function(cb) {
      var esc, f, fnames, ignore, p, si, subpath, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "SummarizedItem::load");
      p = path.join(this.summarizer.root_dir(), this.parent_path, this.fname);
      this.realpath = path.resolve(p);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/chris/git/keybase/dir-summarize/src/summarizer.iced",
            funcname: "SummarizedItem.load_traverse"
          });
          finfo_cache(_this.realpath, esc(__iced_deferrals.defer({
            assign_fn: (function(__slot_1) {
              return function() {
                return __slot_1.finfo = arguments[0];
              };
            })(_this),
            lineno: 38
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          _this.item_type = _this.finfo.item_type;
          _this.link = _this.finfo.link;
          _this.binary = _this.finfo.is_binary();
          (function(__iced_k) {
            if (_this.item_type === item_types.FILE) {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/chris/git/keybase/dir-summarize/src/summarizer.iced",
                  funcname: "SummarizedItem.load_traverse"
                });
                _this.finfo.hash(constants.hash.ALG, constants.hash.ENCODING, esc(__iced_deferrals.defer({
                  assign_fn: (function(__slot_1) {
                    return function() {
                      return __slot_1.hash = arguments[0];
                    };
                  })(_this),
                  lineno: 45
                })));
                __iced_deferrals._fulfill();
              })(__iced_k);
            } else {
              (function(__iced_k) {
                if (_this.item_type === item_types.DIR) {
                  _this.contents = [];
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/Users/chris/git/keybase/dir-summarize/src/summarizer.iced",
                      funcname: "SummarizedItem.load_traverse"
                    });
                    _this.finfo.dir_contents(esc(__iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          return fnames = arguments[0];
                        };
                      })(),
                      lineno: 48
                    })));
                    __iced_deferrals._fulfill();
                  })(function() {
                    (function(__iced_k) {
                      var _i, _len, _ref, _results, _while;
                      _ref = fnames;
                      _len = _ref.length;
                      _i = 0;
                      _results = [];
                      _while = function(__iced_k) {
                        var _break, _continue, _next;
                        _break = function() {
                          return __iced_k(_results);
                        };
                        _continue = function() {
                          return iced.trampoline(function() {
                            ++_i;
                            return _while(__iced_k);
                          });
                        };
                        _next = function(__iced_next_arg) {
                          _results.push(__iced_next_arg);
                          return _continue();
                        };
                        if (!(_i < _len)) {
                          return _break();
                        } else {
                          f = _ref[_i];
                          subpath = path.join(_this.realpath, f);
                          (function(__iced_k) {
                            __iced_deferrals = new iced.Deferrals(__iced_k, {
                              parent: ___iced_passed_deferral,
                              filename: "/Users/chris/git/keybase/dir-summarize/src/summarizer.iced",
                              funcname: "SummarizedItem.load_traverse"
                            });
                            _this.summarizer.should_ignore(subpath, esc(__iced_deferrals.defer({
                              assign_fn: (function() {
                                return function() {
                                  return ignore = arguments[0];
                                };
                              })(),
                              lineno: 51
                            })));
                            __iced_deferrals._fulfill();
                          })(function() {
                            (function(__iced_k) {
                              if (!ignore) {
                                si = _this.subitem(f);
                                (function(__iced_k) {
                                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                                    parent: ___iced_passed_deferral,
                                    filename: "/Users/chris/git/keybase/dir-summarize/src/summarizer.iced",
                                    funcname: "SummarizedItem.load_traverse"
                                  });
                                  si.load_traverse(esc(__iced_deferrals.defer({
                                    lineno: 54
                                  })));
                                  __iced_deferrals._fulfill();
                                })(function() {
                                  return __iced_k(_this.contents.push(si));
                                });
                              } else {
                                return __iced_k();
                              }
                            })(_next);
                          });
                        }
                      };
                      _while(__iced_k);
                    })(function() {
                      return __iced_k(_this.contents.sort(function(a, b) {
                        return a.fname.localeCompare(b.fname, 'us');
                      }));
                    });
                  });
                } else {
                  (function(__iced_k) {
                    if (_this.item_type === item_types.SYMLINK) {
                      (function(__iced_k) {
                        __iced_deferrals = new iced.Deferrals(__iced_k, {
                          parent: ___iced_passed_deferral,
                          filename: "/Users/chris/git/keybase/dir-summarize/src/summarizer.iced",
                          funcname: "SummarizedItem.load_traverse"
                        });
                        _this.finfo.link_hash(constants.hash.ALG, constants.hash.ENCODING, esc(__iced_deferrals.defer({
                          assign_fn: (function(__slot_1) {
                            return function() {
                              return __slot_1.link_hash = arguments[0];
                            };
                          })(_this),
                          lineno: 60
                        })));
                        __iced_deferrals._fulfill();
                      })(__iced_k);
                    } else {
                      return __iced_k();
                    }
                  })(__iced_k);
                }
              })(__iced_k);
            }
          })(function() {
            return cb();
          });
        };
      })(this));
    };

    SummarizedItem.prototype.subitem = function(f) {
      return new SummarizedItem({
        fname: f,
        parent_path: this.parent_path.length ? "" + this.parent_path + "/" + this.fname : this.fname,
        summarizer: this.summarizer,
        depth: this.depth + 1
      });
    };

    SummarizedItem.prototype.signable_info = function() {
      var info;
      info = {
        depth: this.depth,
        parent_path: this.parent_path,
        item_type: this.item_type,
        fname: this.fname,
        path: this.parent_path.length ? "" + this.parent_path + "/" + this.fname : this.fname,
        exec: this.finfo.is_user_executable_file(),
        binary: this.binary
      };
      switch (this.item_type) {
        case item_types.FILE:
          info.hash = this.hash;
          info.size = this.finfo.stat.size;
          info.possible_win_link = this.finfo.possible_win_link;
          break;
        case item_types.SYMLINK:
          info.link = this.link;
          info.link_hash = this.link_hash;
      }
      return info;
    };

    SummarizedItem.prototype.walk_to_array = function(_res) {

      /*
      returns an array of all items starting at this point,
      sorted in a predictable way;
       */
      var c, _i, _len, _ref;
      _res || (_res = []);
      if (this.item_type === item_types.DIR) {
        _res.push(this.signable_info());
        _ref = this.contents;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          c = _ref[_i];
          c.walk_to_array(_res);
        }
      } else {
        _res.push(this.signable_info());
      }
      return _res;
    };

    return SummarizedItem;

  })();

  Summarizer = (function() {
    function Summarizer(opts) {
      var _base, _base1;
      this.root_item = null;
      this.presets = [];
      this.opts = opts || {};
      (_base = this.opts).ignore || (_base.ignore = []);
      (_base1 = this.opts).presets || (_base1.presets = []);
      this.opts.root_dir = path.resolve(this.opts.root_dir || '.');
      this._create_presets();
    }

    Summarizer.prototype.should_ignore = function(path_to_file, cb) {
      var p, r, res, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      res = false;
      (function(_this) {
        return (function(__iced_k) {
          if (__indexOf.call(_this.opts.ignore, path_to_file) >= 0) {
            return __iced_k(res = true);
          } else {
            (function(__iced_k) {
              var _i, _len, _ref, _results, _while;
              _ref = _this.presets;
              _len = _ref.length;
              _i = 0;
              _results = [];
              _while = function(__iced_k) {
                var _break, _continue, _next;
                _break = function() {
                  return __iced_k(_results);
                };
                _continue = function() {
                  return iced.trampoline(function() {
                    ++_i;
                    return _while(__iced_k);
                  });
                };
                _next = function(__iced_next_arg) {
                  _results.push(__iced_next_arg);
                  return _continue();
                };
                if (!(_i < _len)) {
                  return _break();
                } else {
                  p = _ref[_i];
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/Users/chris/git/keybase/dir-summarize/src/summarizer.iced",
                      funcname: "Summarizer.should_ignore"
                    });
                    p.handle(_this.opts.root_dir, path_to_file, __iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          return r = arguments[0];
                        };
                      })(),
                      lineno: 132
                    }));
                    __iced_deferrals._fulfill();
                  })(function() {
                    (function(__iced_k) {
                      if (r === constants.ignore_res.IGNORE) {
                        res = true;
                        (function(__iced_k) {
_break()
                        })(__iced_k);
                      } else {
                        (function(__iced_k) {
                          if (r === constants.ignore_res.DONT_IGNORE) {
                            res = false;
                            (function(__iced_k) {
_break()
                            })(__iced_k);
                          } else {
                            return __iced_k();
                          }
                        })(__iced_k);
                      }
                    })(_next);
                  });
                }
              };
              _while(__iced_k);
            })(__iced_k);
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(null, res);
        };
      })(this));
    };

    Summarizer.prototype.set_root_item = function(ri) {
      return this.root_item = ri;
    };

    Summarizer.prototype.root_dir = function() {
      return this.opts.root_dir;
    };

    Summarizer.from_dir = function(dir, opts, cb) {
      var err, root_item, summ, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);

      /*
      takes the path to a directory and returns a Summarize instance
       */
      opts = opts || {};
      opts.root_dir || (opts.root_dir = dir);
      summ = new Summarizer(opts);
      err = null;
      root_item = new SummarizedItem({
        fname: '.',
        parent_path: '',
        summarizer: summ
      });
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/chris/git/keybase/dir-summarize/src/summarizer.iced",
            funcname: "Summarizer.from_dir"
          });
          root_item.load_traverse(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 165
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (err == null) {
            summ.set_root_item(root_item);
          } else {
            console.log(err);
          }
          return cb(err, summ);
        };
      })(this));
    };

    Summarizer.prototype.hash_match = function(h1, h2) {
      return (!((h1 != null) || (h2 != null))) || ((h1 != null ? h1.hash : void 0) === (h2 != null ? h2.hash : void 0));
    };

    Summarizer.prototype.hash_alt_match = function(h1, h2) {
      return (!((h1 != null) || (h2 != null))) || ((h1 != null ? h1.hash : void 0) === (h2 != null ? h2.hash : void 0)) || ((h1 != null ? h1.alt_hash : void 0) === (h2 != null ? h2.hash : void 0)) || ((h1 != null ? h1.hash : void 0) === (h2 != null ? h2.alt_hash : void 0));
    };

    Summarizer.prototype.compare_to_json_obj = function(obj, cb) {

      /*
      calls back with an array of problems
      each item in the array is a pair [code, {got, expected}]
       */
      var exp_by_path, expected, f, got, got_by_path, p1, probs, status, _i, _j, _len, _len1, _ref, _ref1;
      probs = [];
      got_by_path = {};
      exp_by_path = {};
      _ref = this.to_json_obj().found;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        f = _ref[_i];
        got_by_path[f.path] = f;
      }
      _ref1 = obj.found;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        f = _ref1[_j];
        exp_by_path[f.path] = f;
      }
      for (p1 in exp_by_path) {
        expected = exp_by_path[p1];
        status = vc.OK;
        if ((got = got_by_path[p1]) == null) {
          if (expected.item_type === item_types.DIR) {
            status = vc.MISSING_DIR;
          } else {
            status = vc.MISSING_FILE;
          }
        } else if ((expected.item_type === item_types.SYMLINK) && (got.item_type === item_types.FILE) && (expected.link === got.possible_win_link)) {
          status = vc.ALT_SYMLINK_MATCH;
        } else if ((expected.item_type === item_types.FILE) && (got.item_type === item_types.SYMLINK) && this.hash_alt_match(expected.hash, got.link_hash)) {
          status = vc.ALT_SYMLINK_MATCH;
        } else if (expected.item_type !== got.item_type) {
          if ((expected.item_type === item_types.FILE) && (got.item_type === item_types.SYMLINK)) {
            console.log("expected hash: " + expected.hash.hash + " (or " + expected.hash.alt_hash + "); got link_hash: " + got.link_hash.hash);
          }
          status = vc.WRONG_ITEM_TYPE;
        } else if ((expected.item_type === item_types.FILE) && (expected.exec !== got.exec)) {
          status = vc.WRONG_EXEC_PRIVS;
        } else if (expected.link !== got.link) {
          status = vc.WRONG_SYMLINK;
        } else if (!this.hash_alt_match(got.hash, expected.hash)) {
          status = vc.HASH_MISMATCH;
        } else if (!this.hash_match(got.hash, expected.hash)) {
          status = vc.ALT_HASH_MATCH;
        }
        if (status !== vc.OK) {
          probs.push([
            status, {
              got: got || null,
              expected: expected || null
            }
          ]);
        }
      }
      for (p1 in got_by_path) {
        got = got_by_path[p1];
        if (exp_by_path[p1] == null) {
          if (got.item_type === item_types.DIR) {
            probs.push([
              vc.ORPHAN_DIR, {
                got: got,
                expected: null
              }
            ]);
          } else {
            probs.push([
              vc.ORPHAN_FILE, {
                got: got,
                expected: null
              }
            ]);
          }
        }
      }
      probs.sort(function(a, b) {
        return a[0] - b[0];
      });
      return cb(probs);
    };

    Summarizer.prototype.to_json_obj = function() {

      /*
      a deterministic representation of the summary
       */
      return {
        meta: {
          version: new PackageJson().version()
        },
        ignore: this.opts.ignore,
        presets: this.opts.presets,
        found: this.root_item.walk_to_array()
      };
    };

    Summarizer.prototype._create_presets = function() {
      var p, _i, _len, _ref;
      _ref = this.opts.presets;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        switch (p) {
          case 'git':
            this.presets.push(new GitPreset());
            break;
          case 'dropbox':
            this.presets.push(new DropboxPreset());
            break;
          case 'none':
            continue;
          default:
            throw new Error("Unknown preset: " + p);
        }
      }
      if (this.opts.ignore.length) {
        return this.presets.push(new GlobberPreset(this.opts.root_dir, this.opts.ignore));
      }
    };

    return Summarizer;

  })();

  exports.Summarizer = Summarizer;

}).call(this);
