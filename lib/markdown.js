// Generated by IcedCoffeeScript 1.7.1-b
(function() {
  var PackageJson, item_types, max_depth, path, pretty_format_files, tablify, utils;

  path = require('path');

  tablify = require('tablify');

  item_types = require('./constants').item_types;

  utils = require('./utils');

  PackageJson = require('./package').PackageJson;


  /*
  
    A serializer/deserialized for Markdown from summarizer objects
   */

  max_depth = function(found_files) {
    var f, _i, _len;
    max_depth = 0;
    for (_i = 0, _len = found_files.length; _i < _len; _i++) {
      f = found_files[_i];
      max_depth = Math.max(f.depth, max_depth);
    }
    return max_depth;
  };

  pretty_format_files = function(found_files) {
    var col1, col2, col3, col4, f, i, rows, _i, _len;
    rows = [['file', 'contents', 'size', 'mode']];
    for (_i = 0, _len = found_files.length; _i < _len; _i++) {
      f = found_files[_i];
      col1 = ((function() {
        var _j, _ref, _results;
        _results = [];
        for (i = _j = 0, _ref = f.depth; 0 <= _ref ? _j < _ref : _j > _ref; i = 0 <= _ref ? ++_j : --_j) {
          _results.push("  ");
        }
        return _results;
      })()).join('') + utils.escape(path.join(f.parent_path, f.fname));
      col2 = (function() {
        switch (f.item_type) {
          case item_types.SYMLINK:
            return "-> " + (utils.escape(f.link));
          case item_types.DIR:
            return "";
          case item_types.FILE:
            return f.hash;
        }
      })();
      col3 = f.item_type === item_types.FILE ? f.size : '';
      col4 = f.mode;
      rows.push([col1, col2, col3, col4]);
    }
    return tablify(rows, {
      show_index: false,
      row_start: '',
      row_end: '',
      spacer: '  ',
      row_sep_char: ''
    });
  };

  exports.to_md = function(o) {
    var file_list, ignore_list, label, res;
    label = function(f) {
      var i;
      return ((function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = f.depth; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push("  ");
        }
        return _results;
      })()).join("") + path.join(f.parent_path, f.fname);
    };
    ignore_list = o.exclude.join('\n');
    file_list = pretty_format_files(o.found);
    res = "#### Verify\n\n```\n" + file_list + "\n```\n\n#### Ignore\n\n```\n" + ignore_list + "\n```\n\n<!-- dir_signer version = " + ((new PackageJson()).version()) + " -->";
    return res;
  };

  exports.from_md = function(str) {
    var match, rxx;
    rxx = /^\s*\#\#\#\#\sVerify\s*```([^`]*)```\s*\#\#\#\#\sIgnore\s*```([^`]*)```\s*$/;
    match = rxx.exec(str);
    if (match != null) {
      return {
        file_list: match[1],
        ignore_list: match[2]
      };
    } else {
      return null;
    }
  };

}).call(this);
