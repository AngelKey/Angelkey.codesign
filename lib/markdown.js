// Generated by IcedCoffeeScript 1.7.1-b
(function() {
  var constants, files_from_pretty_format, item_types, max_depth, path, pretty_format_files, tablify, utils;

  path = require('path');

  tablify = require('tablify');

  constants = require('./constants');

  item_types = require('./constants').item_types;

  utils = require('./utils');


  /*
  
    A serializer/deserialized for Markdown from summarizer objects
   */

  max_depth = function(found_files) {
    var f, _i, _len;
    max_depth = 0;
    for (_i = 0, _len = found_files.length; _i < _len; _i++) {
      f = found_files[_i];
      max_depth = Math.max(f.depth, max_depth);
    }
    return max_depth;
  };

  pretty_format_files = function(found_files) {
    var col1, col2, col3, col4, f, i, rows, _i, _len;
    rows = [['file', 'contents', 'size', 'exec']];
    for (_i = 0, _len = found_files.length; _i < _len; _i++) {
      f = found_files[_i];
      col1 = ((function() {
        var _j, _ref, _results;
        _results = [];
        for (i = _j = 0, _ref = f.depth; 0 <= _ref ? _j < _ref : _j > _ref; i = 0 <= _ref ? ++_j : --_j) {
          _results.push("  ");
        }
        return _results;
      })()).join('') + utils.escape("" + f.path);
      col2 = (function() {
        switch (f.item_type) {
          case item_types.SYMLINK:
            return "-> " + (utils.escape(f.link));
          case item_types.DIR:
            return "";
          case item_types.FILE:
            return f.hash;
        }
      })();
      col3 = f.item_type === item_types.FILE ? f.size : '';
      col4 = f.exec ? 'x' : '-';
      rows.push([col1, col2, col3, col4]);
    }
    return tablify(rows, {
      show_index: false,
      row_start: '',
      row_end: '',
      spacer: '  ',
      row_sep_char: ''
    });
  };

  files_from_pretty_format = function(str_arr) {
    var cols, fparts, fpath, info, res, s, _i, _len;
    res = [];
    for (_i = 0, _len = str_arr.length; _i < _len; _i++) {
      s = str_arr[_i];
      s = s.replace(/(^\s+)|([\s\n]+$)/g, '');
      cols = s.split(/[\s]+/g);
      fpath = utils.unescape(cols[0]);
      fparts = fpath.split('/');
      info = {
        fname: fparts.slice(-1)[0],
        parent_path: fparts.slice(0, -1).join('/'),
        path: fpath
      };
      if (cols.length === 2) {
        info.item_type = item_types.DIR;
        info.exec = cols[1] === 'x';
      } else if (cols[1] === '->') {
        info.item_type = item_types.SYMLINK;
        info.link = cols[2];
        info.exec = cols[3] === 'x';
      } else {
        info.item_type = item_types.FILE;
        info.hash = cols[1];
        info.size = parseInt(cols[2]);
        info.exec = cols[3] === 'x';
      }
      res.push(info);
    }
    return res;
  };

  exports.to_md = function(o) {
    var file_list, ignore_list, p, preset_list, res, s;
    ignore_list = ((function() {
      var _i, _len, _ref, _results;
      _ref = o.ignore;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        s = _ref[_i];
        _results.push(utils.escape(s));
      }
      return _results;
    })()).join('\n');
    file_list = pretty_format_files(o.found);
    preset_list = ((function() {
      var _i, _len, _ref, _results;
      _ref = o.presets;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        _results.push("" + p + "  # " + constants.presets[p.toUpperCase()]);
      }
      return _results;
    })()).join('\n');
    res = "#### Verify\n\n```\n" + file_list + "\n```\n\n#### Presets\n\n```\n" + preset_list + "\n```\n\n#### Ignore\n\n```\n" + ignore_list + "\n```\n\n<!-- summarize version = " + o.meta.version + " -->";
    return res;
  };

  exports.from_md = function(str) {
    var f, file_rows, ignore_rows, match, preset_rows, rxx, version;
    rxx = /^\s*\#\#\#\#\sVerify\s*```([^`]*)```\s*\#\#\#\#\sPresets\s*```([^`]*)```\#\#\#\#\sIgnore\s*```([^`]*)```\s*\<\!--[\s]*summarize[\s]*version[\s]*=[\s]*([0-9a-z\.]*)[\s]*-->\s*$/;
    match = rxx.exec(str);
    if (match != null) {
      file_rows = match[1].split('\n').slice(2, -1);
      preset_rows = match[2].split('\n').slice(1, -1);
      ignore_rows = match[2].split('\n').slice(1, -1);
      version = match[4];
      return {
        found: files_from_pretty_format(file_rows),
        ignore: (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = ignore_rows.length; _i < _len; _i++) {
            f = ignore_rows[_i];
            _results.push(f);
          }
          return _results;
        })(),
        presets: (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = preset_rows.length; _i < _len; _i++) {
            f = preset_rows[_i];
            _results.push(f.replace(/\#.*$/g));
          }
          return _results;
        })(),
        meta: {
          version: version
        }
      };
    } else {
      return null;
    }
  };

}).call(this);
