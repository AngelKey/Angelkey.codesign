// Generated by IcedCoffeeScript 1.7.1-b
(function() {
  var GlobberPreset, PresetBase, constants, fs, glob_to_regexp, iced, path, __iced_k, __iced_k_noop,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  glob_to_regexp = require('glob-to-regexp');

  fs = require('fs');

  path = require('path');

  constants = require('./constants');

  PresetBase = require('./preset_base');

  GlobberPreset = (function(_super) {
    __extends(GlobberPreset, _super);

    function GlobberPreset(working_path, glob_list) {
      this.glob_list = glob_list;
      this.working_path = working_path;
    }

    GlobberPreset.prototype.handle = function(root_dir, path_to_file, cb) {
      var g, rel_path, res, _i, _len, _ref;
      res = constants.ignore_res.NONE;
      rel_path = path.relative(this.working_path, path.join(root_dir, path_to_file));
      console.log("Globber handling " + rel_path + " in context " + this.working_path);
      _ref = this.glob_list;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        g = _ref[_i];
        if (g[0].match(/^[\s\#]/)) {
          console.log("Skipping globber row " + g);
        } else if (glob_to_regexp(g).test(rel_path)) {
          console.log("Globber matched " + g + " to " + rel_path + " in context " + this.working_path);
          res = constants.ignore_res.IGNORE;
          break;
        }
      }
      return cb(res);
    };

    GlobberPreset.from_file = function(f) {
      var full_path, glob_list, gp, working_path, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      full_path = path.resolve(f);
      working_path = path.dirname(full_path);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/chris/git/keybase/dir-summarize/src/preset/globber.iced",
            funcname: "GlobberPreset.from_file"
          });
          PresetBase.file_to_array(f, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return glob_list = arguments[0];
              };
            })(),
            lineno: 36
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          gp = new GlobberPreset(working_path, glob_list);
          console.log("Generated globber from " + full_path + "; glob_list = [" + (glob_list.join(', ')) + "]");
          return gp;
        };
      })(this));
    };

    return GlobberPreset;

  })(PresetBase);

  module.exports = GlobberPreset;

}).call(this);
